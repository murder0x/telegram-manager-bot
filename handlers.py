from aiogram import Router, Bot, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging

from database import add_application

router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message):
    kb = [[KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")] ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=keyboard
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "–Ø –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. üìù\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É, —É–∫–∞–∑–∞–≤ –≤–∞—à–µ –∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω –∏ —Ç–µ–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'."
    )

class ApplicationForm(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_topic = State()
    waiting_for_confirmation = State()

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–≥–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä F –¥–ª—è "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"
@router.message(F.text.func(lambda text: text.lower().strip() == "–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"))
async def start_application_form(message: Message, state: FSMContext):
    await state.set_state(ApplicationForm.waiting_for_name)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=ReplyKeyboardRemove())

@router.message(ApplicationForm.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(ApplicationForm.waiting_for_phone)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@router.message(ApplicationForm.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await state.set_state(ApplicationForm.waiting_for_topic)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:")

@router.message(ApplicationForm.waiting_for_topic)
async def process_topic(message: Message, state: FSMContext):
    await state.update_data(topic=message.text)
    user_data = await state.get_data()
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ! –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º –¥–∞–Ω–Ω—ã–µ:\n"
        f"–ò–º—è: {user_data['name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n"
        f"–¢–µ–º–∞: {user_data['topic']}\n\n"
        f"–í—Å–µ –≤–µ—Ä–Ω–æ?",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å"), KeyboardButton(text="–ù–µ—Ç, –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    await state.set_state(ApplicationForm.waiting_for_confirmation)

@router.message(ApplicationForm.waiting_for_confirmation, F.text.func(lambda text: text.lower().strip() == "–¥–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å"))
async def process_confirmation_yes(message: Message, state: FSMContext, bot: Bot, notification_bot_token: str, admin_ids_for_notifications: list[str]):
    user_data = await state.get_data()
    try:
        add_application(user_data['name'], user_data['phone'], user_data['topic'])
        await message.answer(
            "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è. ‚úÖ",
            reply_markup=ReplyKeyboardRemove()
        )

        if notification_bot_token and admin_ids_for_notifications:
            notification_bot = Bot(token=notification_bot_token)
            try:
                admin_message_text = (
                    f"üì¨ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é (—á–µ—Ä–µ–∑ @{bot.id}):\n"
                    f"üë§ –ò–º—è: {user_data['name']}\n"
                    f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n"
                    f"üìå –¢–µ–º–∞: {user_data['topic']}"
                )
                for admin_id_str in admin_ids_for_notifications:
                    try:
                        await notification_bot.send_message(admin_id_str, admin_message_text)
                        logging.info(f"Notification sent to admin ID {admin_id_str} via notification bot.")
                    except Exception as e_send_individual:
                        logging.error(f"Error sending notification to admin ID {admin_id_str}: {e_send_individual}")
            except Exception as e_notify_setup:
                logging.error(f"Error setting up notification sender or sending notifications: {e_notify_setup}")
            finally:
                await notification_bot.session.close()
        else:
            logging.warning("NOTIFICATION_BOT_TOKEN or ADMIN_IDS for notifications not set/empty. Admin(s) will not be notified.")

    except Exception as e_main:
        logging.error(f"Error saving application: {e_main}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ. ‚ö†Ô∏è",
            reply_markup=ReplyKeyboardRemove()
        )
    finally:
        await state.clear()
        kb_start = [[KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")]]
        keyboard_start = ReplyKeyboardMarkup(keyboard=kb_start, resize_keyboard=True)
        await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –∑–∞—è–≤–∫—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /help.", reply_markup=keyboard_start)

@router.message(ApplicationForm.waiting_for_confirmation, F.text.func(lambda text: text.lower().strip() == "–Ω–µ—Ç, –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"))
async def process_confirmation_no(message: Message, state: FSMContext):
    await state.set_state(ApplicationForm.waiting_for_name)
    await message.answer("–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=ReplyKeyboardRemove())

@router.message(ApplicationForm.waiting_for_confirmation)
async def process_confirmation_invalid(message: Message, state: FSMContext):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞: '–î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å' –∏–ª–∏ '–ù–µ—Ç, –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ'.",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å"), KeyboardButton(text="–ù–µ—Ç, –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )